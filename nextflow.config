params {
    // Out directiorny configurations
    runs_dir = "simulations" 
    runname = null
    outdir = "${params.runs_dir}/${params.runname}"
    simdir = "${params.outdir}/sims"
    datadir = "${params.outdir}/data"
    bindir = "${params.outdir}/bins"
    publish_dir_mode = 'copy'

    // Data generation parameters 
    params_config = "sim_params/test_params.csv"
    interactions = null
    symbiont_tree = null
    host_tree = null

    // Compilation and runtime configurations
    time = false
    ngens = null
    nruns = null
    niter = null
    sampling_period = null
    nhosts = null
    nsymbionts = null

    // Algorithm and models specifications
    inference_algorithm = null
    treeppl_model_name = null
    treeppl_model_dir = null
    models = null
    version_model_dir = null
    run_revbayes = false
    run_treeppl = false
    debug_treeppl = false
    
    // Containers (specified in `conf/container_versions_conf`)
    container_treeppl = null
    container_revbayes = null
    container_r = null
    container_python = null
    container_base = null

    // TreePPL library path (under most circumstances constant)
    tppl_lib_path = "tppl_lib/"

}

profiles {
    docker {
        docker.enabled    = true
        podman.enabled = false
    }

    podman {
        docker.enabled    = false
        podman.enabled = true
    }

    local {
        executor.memory = 8.GB
        executor.cpus = 4
    }

    shared_server {
        executor.memory = 58.GB
        executor.cpus = 18
    }

    server {
        executor.memory = 62.GB
        executor.cpus = 24
    }

    // Select profile for TreePPL version
    original {
        includeConfig 'conf/container_versions_conf/original.config'
        includeConfig 'conf/run_conf/original_run.config'
    } 
    custom_drift_kernels {
        includeConfig 'conf/container_versions_conf/custom_drift_kernels.config'
        includeConfig 'conf/run_conf/cdk_run.config'
    } 
    mcmc_dists {
        includeConfig 'conf/container_versions_conf/mcmc_dists.config'
        includeConfig 'conf/run_conf/mcmc_dists_run.config'
    } 
    incremental {
        includeConfig 'conf/container_versions_conf/incremental.config'
        includeConfig 'conf/run_conf/incremental_run.config'
    }
    DAE {
        includeConfig 'conf/container_versions_conf/debug-alignment-edk.config'
        includeConfig 'conf/run_conf/debug-alignment.config'
    }
    DAF {
        includeConfig 'conf/container_versions_conf/debug-alignment-fdk.config'
        includeConfig 'conf/run_conf/debug-alignment.config'
    }
    MA {
        includeConfig 'conf/container_versions_conf/manual-alignment.config'
        includeConfig 'conf/run_conf/manual-alignment.config'
    }
}

docker.registry = "docker.io"
podman.registry = "docker.io"

process {

    container = params.container_base    

    cpus = 1
    memory = 1.GB

    publishDir = [
        path: { "${params.outdir}/${task.process.toLowerCase()}" },
        mode: params.publish_dir_mode,
    ]

    errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
    maxRetries    = 1

    withLabel:data {
        publishDir = [
            path: { "${params.datadir}/${task.process.toLowerCase()}" },
            mode: params.publish_dir_mode,
        ]
    }

    withLabel:compile {
        publishDir = [
            path: { "${params.bindir}/${task.process.toLowerCase()}" },
            mode: params.publish_dir_mode,
        ]
        memory = 3.GB
    }

    withLabel:sim {
        publishDir = [
            path: { "${params.simdir}/${task.process.toLowerCase()}" },
            mode: params.publish_dir_mode,
        ]
        memory = { 1.5.GB * Math.pow(2, task.attempt - 1) }
        maxRetries    = 5
        cpus = 2
    }
    withLabel:rb_sim {
        publishDir = [
            path: { "${params.simdir}/${task.process.toLowerCase()}" },
            mode: params.publish_dir_mode,
        ]
        memory = { 1.5.GB * Math.pow(2, task.attempt - 1) }
        maxRetries    = 5
        cpus = 1
    }
}

