/*
 *  Host repertoire model with full rejection sampling
 *
 * Uniformization along branches instead of rejection sampline.
 * It adjusts for repertoire along branches with rejection sampling
 *
 */ 
/*---------------------------- TYPES --------------------------------*/

// TreeLabeled is like the built in Tree type, but with leaf and node labels
type TreeLabeled =
    | Leaf{age: Real, label: Int}
    | Node{age: Real, left: TreeLabeled, right: TreeLabeled, label: Int}

/*-------------------- Model-specific types -------------------------*/

type ModelParams = 
  ModelParams{qMatrix: Tensor[Real], dMatrix: Tensor[Real], dMean: Real, beta: Real}

// Tree decorated with postorder messages from belief propagation.
// Postorder = backwards in time
type MsgTree =
 | MsgLeaf{age: Real, label: Int, out_msg: Tensor[Real][]}
 | MsgNode{age: Real, label: Int, left: MsgTree, right: MsgTree,
           left_in_msg: Tensor[Real][], right_in_msg: Tensor[Real][], out_msg: Tensor[Real][]}

// Tree decorated with final probabilities from belief propagation,
// tuned so that they are useful for proposals.
type ProbsTree =
 | ProbsLeaf{age: Real, label: Int, probs: Tensor[Real][]}
 | ProbsNode{age: Real, label: Int, probs: Tensor[Real][],
             left: ProbsTree, right: ProbsTree}

// Event type used to store information about one host-repertoire change
// We keep the from_state here just in case we want to use it for debugging
type Event = Event{age: Real, host: Int, from_state: Int, to_state: Int}

// Type used to hold a proposed history of state changes for a branch
type ProposedHistory = ProposedHistory{log_debt: Real, events: Event[], success: Bool}

// History point type used to store repertoire snapshots at the repertoire
// start ages, which is the time of the event that led to that combination
type HistoryPoint = HistoryPoint{age: Real, repertoire: Int[]}

// HistoryScore type used to store a vector of history points and a log
// score associated with this history.
type HistoryScore = HistoryScore{log_score: Real, history: HistoryPoint[]}

// Tree decorated with ancestral host repertoires and branch repertoire histories
type HistoryTree =
  | HistoryLeaf{age: Real, label: Int, repertoire: Int[], history: HistoryPoint[], log_rep_debt: Real}
  | HistoryNode{age: Real, label: Int, repertoire: Int[], history: HistoryPoint[], log_rep_debt: Real,
                left: HistoryTree, right: HistoryTree}

// Type used to hold the character histories and parameter values to be outputed
type ReturnType = ReturnType{tree: HistoryTree, lambda: Real[], mu: Real, beta: Real}

// Types for uniformization

type UBranchEventsAndDebt = UBranchEventsAndDebt {
  events: Int[],
  logDebt: Real
}

type UBranchEventTimesAndDebt = UBranchEventTimesAndDebt {
  eventTimes: Real[],
  logDebt: Real
}

type UEvent = UEvent {
  event: Int,
  eventTime: Real
}

type UBranchHistory = UBranchHistory {
  events: Int[],
  eventTimes: Real[]
}

type UBranchHistoryAndDebt = UBranchHistoryAndDebt {
  events: Int[],
  eventTimes: Real[],
  logDebt: Real
}


/*
 *  Model
 *
 *  @param lambda: vector of transition rates 
 *  lambda[1]:0->1, lambda[2]:1->0, lambda[3]:1->2, lambda[4]:2->1 
 *  Transition rates are given as proportions of the total
 *  off-diagonal rate, that is, the sum of lambdas is 1.0
 * 
 *  @param mu: rescale all rates in lambda with mu. Referred to as the maximum
 *  rate (or rate, for short) of host repertoire evolution, since
 *  0≤mu*lambda_i≤mu for all i (all lambdas <= 1.0).
 * 
 *  @param beta: phylogenetic distance parameter, determining strength of the
 *  host distance effect on host repertoire evolution.
 */

model function mymodel(symbiont_tree: TreeLabeled, ntips: Int, nhosts: Int, interactions: Int[],
  host_distances: Real[], dMean: Real, tune: Real): ReturnType {

  // Set priors for model parameters
  assume lambda ~ Dirichlet([1.0,1.0,1.0,1.0]); 
  assume mu ~ Exponential(10.0);
  assume beta ~ Exponential(1.0);

  // Set transition rate matrix for three-state independence model
  let r = mtxCreate(3,3,
    [0.-lambda[1],                lambda[1],          0.0,
        lambda[2], 0.-(lambda[2]+lambda[3]),    lambda[3],
              0.0,                lambda[4], 0.-lambda[4]]
  );
  let qMatrix = mtxSclrMul(mu, r);

  // Calculate stationary probabilities for the rate matrix q
  let stationary_probs = stationaryProbs(lambda);

  let dMatrix = mtxCreate(nhosts, nhosts, host_distances);

  // Package model parameters into an object for convenient calling
  let mp = ModelParams{qMatrix = qMatrix, dMatrix = dMatrix, dMean = dMean, beta = beta};

  let interactions_reals = sint2real(interactions);
  let iMatrix = mtxCreate(ntips, nhosts, interactions_reals);

  // Derive params for ancestral repertoire proposals from independence model
  let probs_tree = get_proposal_params(symbiont_tree, iMatrix, qMatrix, stationary_probs, tune);

  // Propose a repertoire for the root of the symbiont tree
  // based on the state probabilities from the belief propagation
  let probRecordSequence = sapply(probs_tree.probs, createProbRecord);
  let root_rep = sapply(probRecordSequence, categorical);

  let log_root_rep_debt = seqSumReal(zipWith(categoricalLogScore, root_rep, probRecordSequence));
	// Note: categorical works here because root_rep id 0-based

  let valid_root = any(is2, root_rep);

  if !valid_root { 
    weight 0.0; 
    resample;
  } 
 
  let log_score_root = - ( log( (3.0 ^ Real(nhosts)) - (2.0 ^ Real(nhosts)) ) );


  // Simulate repertoire history on the symbiont tree (left and right daughters)
  let left = simulate(probs_tree.left, HistoryPoint{age = probs_tree.age, repertoire = root_rep}, mp, iMatrix);
  let right = simulate(probs_tree.right, HistoryPoint{age = probs_tree.age, repertoire = root_rep}, mp, iMatrix);

  // Root node doesn't have any history (no subroot branch)
  let historyTree = HistoryNode{age = probs_tree.age, label = probs_tree.label,
    repertoire = root_rep, history = [], log_rep_debt = log_root_rep_debt-log_score_root,
    left = left, right = right};

  // Factor in the net debt of the proposed ancestral repertoires 
  // at nodes and leaves in the historyTree
  logWeight( -get_rep_debt(historyTree) );
  
  // Return symbiont tree with simulated character history and parameter values
  return ReturnType{tree = historyTree, lambda = lambda, mu = mu, beta = beta};
} 


/*---------------------------- FUNCTIONS --------------------------------*/


/*---------------- Proposal distribution parameters ---------------------*/

/*
 * get_proposal_params
 *
 * This functions uses belief propagation under the independence
 * model, and an anneling parameter 'tune', to obtain parameters
 * for the proposals of ancestral repertoires.
 *
 * Parameters:
 *   @param symbiont_tree: symbiont tree
 *   @param iMatrix: interaction matrix
 *   @param qMatrix: rate matrix for the independence model
 *   @param stationary_probs: stationary probabilities for the independence model
 *   @param tune: parameter in (0,1) determining how much
 *                we should trust the independence model
 *
 * Return value:
 *   A ProbsTree containing the final repertoire state proposal
 *   probabilities for all nodes in the symbiont tree.
 */
function get_proposal_params(symbiont_tree: TreeLabeled, iMatrix: Tensor[Real], qMatrix: Tensor[Real], 
  stationary_probs: Tensor[Real], tune: Real): ProbsTree {

  let msgTree = postorder_msgs(symbiont_tree, iMatrix, qMatrix);  
  let n = length(getMsgTreeMsg(msgTree));
  let pis = rep(n, stationary_probs);
  return final_probs(msgTree, pis, qMatrix, tune);

}

// Compute postorder messages on the observed tree
function postorder_msgs(tree: TreeLabeled, iMatrix: Tensor[Real], qMatrix: Tensor[Real]) : MsgTree {

  if tree is Leaf {
    return MsgLeaf{age = 0.0, label = tree.label, out_msg = observationMessage(mtxGetRow(tree.label, iMatrix))};
  }

  let left  = postorder_msgs(tree.left ,iMatrix, qMatrix);
  let right = postorder_msgs(tree.right,iMatrix, qMatrix);

  let tMatrixLeft = mtxTrans(mtxExp(mtxSclrMul(tree.age-left.age, qMatrix)));   
  let tMatrixRight = mtxTrans(mtxExp(mtxSclrMul(tree.age-right.age, qMatrix)));

  let left_in_msg  = sapply1(left.out_msg, mtxMul, tMatrixLeft);
  let right_in_msg = sapply1(right.out_msg, mtxMul, tMatrixRight);

  let out_msg = normalizeMessage(mulMessage(left_in_msg, right_in_msg));

  return MsgNode{age= tree.age, label= tree.label, left= left, right= right, 
    left_in_msg = left_in_msg, right_in_msg = right_in_msg, out_msg = out_msg};

}

// Compute leaf message from observed interactions
function observationMessage(obs_repertoire: Tensor[Real]) : Tensor[Real][] {
  return tapply(obs_repertoire, makeStateMessage);                         
}

// Takes a single interaction and creates the message
// Interactions are of type Real because of limitations in boolean comparisons
function makeStateMessage(interaction: Real): Tensor[Real] {
  // NOTE: we do not have a switch statement, perhaps we need in the future?

  if (interaction == 0.0) {
    return rvecCreate(3, [1., 0., 0.]);
  } else {
    	if (interaction == 1.0) {
    		return rvecCreate(3, [0., 1., 0.]);
    	} else {
      		if (interaction == 2.0) {
    				return rvecCreate(3, [0., 0., 1.]);
					} else {
    				return rvecCreate(3, [1., 1., 1.]);
						}
				}
		}
}

// Compute final probabilities from belief propagation on the observed symbiont tree
function final_probs(tree: MsgTree, parent_msg: Tensor[Real][], qMatrix: Tensor[Real], tune: Real) : ProbsTree {
    
  let probs = normalizeMessage(
		messageElementPower(mulMessage(tree.out_msg, parent_msg), tune)
  );

  if tree is MsgLeaf {
    return ProbsLeaf{age= 0.0, label= tree.label, probs = probs};
  } 

  let left_branch = tree.age - getMsgTreeAge(tree.left);
  let right_branch = tree.age - getMsgTreeAge(tree.right);

  let tMatrixLeft = mtxExp(mtxSclrMul(left_branch, qMatrix));
  let tMatrixRight = mtxExp(mtxSclrMul(right_branch, qMatrix));

  let left_parent_msg  = sapply1(mulMessage(parent_msg,tree.left_in_msg), mtxMul, tMatrixLeft);
  let right_parent_msg = sapply1(mulMessage(parent_msg,tree.right_in_msg), mtxMul, tMatrixRight);

  let left  =  final_probs(tree.left,  left_parent_msg, qMatrix, tune);
  let right =  final_probs(tree.right, right_parent_msg, qMatrix, tune);

  return ProbsNode{age = tree.age, label = tree.label, left = left, right = right, probs = probs};
}


/*---------------- Model functions -------------------------*/

// Simulate an evolutionary history for the host repertoires, from root to leaves
function simulate (tree: ProbsTree, start: HistoryPoint, mp: ModelParams, iMatrix: Tensor[Real]) : HistoryTree {
    
  let probRecordSequence = sapply(tree.probs, createProbRecord);
  let repertoire = suggestRepertoireWithRS(probRecordSequence);
  let log_rep_debt = seqSumReal(zipWith(categoricalLogScore, repertoire, probRecordSequence)); 
  // Propose a repertoire. The propose mechanism means that the simulation
  // should be "penalized" for the probability associated with the draw. 
  let probs = getProbs(tree);  // TODO: is this needed?
  let probRecordSequence = sapply(tree.probs, createProbRecord);
  

	let stop = HistoryPoint{age = getProbsTreeAge(tree), repertoire = repertoire};
	let history = simulate_history(0, 100, start, stop, mp);
  
	if tree is ProbsLeaf {

		let obs_msg = observationMessage(mtxGetRow(tree.label, iMatrix)); 
		let obsRecordSequence = sapply(obs_msg, createProbRecord);
		let log_score = seqSumReal(zipWith(categoricalLogScore, repertoire, obsRecordSequence));
		// Note: categorical works here because repertoire id 0-based
		
		return HistoryLeaf{age = tree.age, label = tree.label, repertoire = repertoire, 
		                   history = history, log_rep_debt = log_rep_debt - log_score};
	}

	let left = simulate(tree.left, stop, mp, iMatrix);
	let right = simulate(tree.right, stop, mp, iMatrix);

	return HistoryNode{age = tree.age, label = tree.label, repertoire = repertoire,
					   history = history, log_rep_debt = log_rep_debt,
					   left = left, right = right};

}

// Suggest valid repertoire based on rejection sampling
function suggestRepertoireWithRS(probRecordSequence: CategoricalParam[]): Int[] {
  // Note: categorical works here because repertoire id 0-based
  let repertoire = sapply(probRecordSequence, categorical);      // Note: assume is within function categorical
  if any(is2, repertoire) {
    // The repertoire is valid, return it! 
    return repertoire;
  } else {
    return suggestRepertoireWithRS(probRecordSequence);
  }
}

// Simulate history conditional on initial repertoire, start time, and end
// time. We first propose events from the independence model and then
// condition the simulation on those events.
function simulate_history(it: Int, max_reject: Int, from_rep: HistoryPoint, to_rep: HistoryPoint, mp: ModelParams) : HistoryPoint[] {

  if (eqi(it, max_reject)) {
    weight 0.0;
    resample;
  }
  let proposed_unordered_events = propose_events(1, from_rep, to_rep, mp.qMatrix);
  // order events by decreasing age
  // printLn("Before sort");
	let eventSeq = qSort(subAge, proposed_unordered_events.events);
  // Check if the repertoire has at least one 2 at all time points
  // printLn("Before all times valid rep");
  // printProposedHistory(proposed_unordered_events);
  // printEventSeq(eventSeq);
  if all_times_valid_rep(from_rep.repertoire, proposed_unordered_events, eventSeq, 1) {

    // Simulate repertoire evolution from full model, one event at a time
    // printLn("Valid reperotoire");
    let history_score = simulate_by_event(from_rep.repertoire, eventSeq, 1, from_rep.age, 
      to_rep.age, mp, proposed_unordered_events.log_debt);
    
    // Now we have both debt and score at an alignment point 
    logWeight(history_score.log_score - proposed_unordered_events.log_debt); 

    return history_score.history;
  } else {
    // We failed to find a repertoire that satisfied the "one host at all times"
    // requirement, so we reject the proposal and resample the repertoire
    printLn("Invalid reperotoire, rejecting");
    return simulate_history(addi(it, 1), max_reject, from_rep, to_rep, mp);
  }
}


// Propose events from independence model
function propose_events (host_index: Int, from_rep: HistoryPoint, to_rep: HistoryPoint, qMatrix: Tensor[Real]) : ProposedHistory {

  // End case, have already done all hosts ins the repertoire
  if (gti(host_index, length(from_rep.repertoire))) {            
		return ProposedHistory{log_debt = 0.0, events = [], success = true};       
	}
  // Use uniformization here instead -- no rejection sampling needed 
  let propHist1 = proposeEventsUniformization(
    host_index,
    from_rep.age,
    to_rep.age, 
		from_rep.repertoire[host_index],
    to_rep.repertoire[host_index],
    qMatrix
  );
  // printProposedHistory(propHist1);
  // Now check if we succeeded in reaching the right end state
  if (propHist1.success) {
    // We succeeded in finding a repertoire, so we can move to the next host!  
    let propHist2 = propose_events(addi(host_index, 1), from_rep, to_rep, qMatrix);
    return ProposedHistory{
      log_debt = propHist1.log_debt + propHist2.log_debt, 
      events = join([propHist1.events, propHist2.events]),
      success = propHist1.success && propHist2.success
    };
  } else {
    // We failed to find a repertoire that ended in the correct state, 
    // so we must sample again
    return error("We should never be here!!!!!!!");
  }
}

/*
 *  UNIFORMIZATION FUNCTIONS START HERE
 */
function proposeEventsUniformization(
  hostIndex: Int,
  fromTime: Real,
  toTime: Real,
  fromState: Int,
  toState: Int,
  qMatrix: Tensor[Real]
): ProposedHistory {
  // Compute the Poisson rate the uniformization matrix
  // The rate is the maximal rate -- checking diagonal would suffice, but this is simpler in tppl
  let nu = -tensorFold(minf, 0.0, qMatrix);
  // The uniformization matrix is Q / nu + I, which is a Markov matrix
  let unifMatrix = mtxAdd(
    mtxSclrMul(1.0 / nu, qMatrix),
    mtxCreateId(dim(qMatrix)[1])
  );
  /*
  printLn("Uniformization between");
  printLn(int2string(fromState));
  printLn(int2string(toState));
  printLn("With uMatrix");
  printMtx(unifMatrix);
  */
  

  // Compute the minimal number of events needed for the chain to be valid
  // This is the absolute difference between the start and end states minus 1
  let absi = function (v: Int) {
    if (gti(v, 0)) { return v;  } else { return subi(0, v); }
  };
  let minTransitions = maxi(
    subi(
      absi(
        subi(
          fromState, toState
        )
      ),
      1
    ),
    0
  );

  // Sample from a Poisson, conditioned on the minimal number of events
  let eventRate = nu * (fromTime - toTime);
  let nEvents = minPoissonITS(minTransitions, eventRate);
  let nEventsWeight = minPoissonLogWeight(nEvents, minTransitions, eventRate);

  // Now we can sample the event times
  let eventTimesAndDebt = getEventTimes(nEvents, toTime, fromTime);
  
  // Sample the transition chain -- this will be conditioned on both the start and end state
  let res = forwardsBackardsAlgorithm(unifMatrix, fromState, toState, nEvents);
  let events = join([[fromState], res.events, [toState]]);
  let eventTimes = join([[fromTime], eventTimesAndDebt.eventTimes, [toTime]]);
  //printLn("Events");
  //printSeqInt(events);
  //printLn("Event times");
  //printSeqFloat(eventTimes);

  let totalLogDebt = nEventsWeight + res.logDebt + eventTimesAndDebt.logDebt;
  // Remove self transitions from the sampled chain and return it
  return createProposedHistory(
    hackZipWith(0, events, eventTimes),
    totalLogDebt,
    hostIndex
  );
}

function hackZipWith(i: Int, events: Int[], eventTimes: Real[]): UEvent[] {
  if (eqi(i, length(events))) {
    return [];
  } else {
    let nextI = addi(i, 1);
    return join([[UEvent {
      event = events[nextI], eventTime = eventTimes[nextI]
    }], hackZipWith(nextI, events, eventTimes)]);
  }
}

// Accumuluates the event and event times without self transitions
function createProposedHistory(
  events: UEvent[], logDebt: Real, hostIndex: Int
): ProposedHistory {
  if gti(2, length(events)) {
    // We must always have at least 2 events -- the end and start states
    // So this should never occur
    return ProposedHistory { log_debt = logDebt, events = [], success = false};
  } else {
    let eventSeq = fold(
      function (acc: Event[], i: Int) {
        let fromEvent = events[subi(i, 1)];
        let toEvent = events[i];
        if !eqi(fromEvent.event, toEvent.event) {
          return join(
              [
                acc,
                [
                  Event {
                    age = toEvent.eventTime,
                    host = hostIndex,
                    from_state = fromEvent.event,
                    to_state = toEvent.event
                  }
                ]
              ]
            );
        } else {
          return acc;
        }
      },
      [],
      range(2, addi(length(events), 1), 1)
    );
    return ProposedHistory { 
      log_debt = logDebt,
      events = eventSeq,
      success = true  
    };
  }
}

// Sample from a Poisson given that we need a value of atleast minVal
// In our case, minVal will never be greater than 1
function minPoissonRS(minVal: Int, rate: Real): Int {
  assume val ~ Poisson(rate);
  if (gti(val, subi(minVal, 1))) {
    return val;
  } else {
    return minPoissonRS(minVal, rate);
  }
}

// Sample from a Poisson with value at least minVal using inverse transform sampling
function minPoissonITS(minVal: Int, rate: Real) {
  let correction = 1. - fold(
    function (acc: Real, s: Int) {
      return acc + poissonPmf(rate, s);
    },
    0.0,
    range(0, minVal, 1)
  );
  assume u ~ Uniform(0.0, 1.0);
  let t = poissonPmf(rate, minVal) / correction;
  return recPITS(minVal, rate, t, t, u);
}

function recPITS(k: Int, rate: Real, s: Real, t: Real, u: Real) {
  if u <= s {
    return k;
  } else {
    let t_new = t * rate / int2real(k);
    return recPITS(addi(k, 1), rate, s + t_new, t_new, u);
  }
}

function minPoissonLogWeight(sample: Int, minVal: Int, rate: Real): Real {
  // Compute the correction factor due to the fact that we don't sample from a true Poisson
  let correction = 1. - fold(
    function (acc: Real, s: Int) {
      return acc + poissonPmf(rate, s);
    },
    0.0,
    range(0, minVal, 1)
  );
  return poissonLogPmf(rate, sample) - log(correction);
}

function getEventTimes(
  nEvents: Int, startTime: Real, endTime: Real
): UBranchEventTimesAndDebt {
  let unorderedEventTimes = sampleEventTimes(nEvents, startTime, endTime);
  let eventTimes = qSort(
    function (time1: Real, time2: Real ) {
      if (time1 < time2) {
        return 1;
      } else {
        return subi(0, 1);
      }
    },
    unorderedEventTimes
  );
  let logDebt = sortedUniformLogDebt(nEvents, startTime, endTime);
  return UBranchEventTimesAndDebt{ eventTimes = eventTimes, logDebt = logDebt };
}

function sampleEventTimes(
  nEvents: Int, startTime: Real, endTime: Real
): Real[] {
  if (eqi(nEvents, 0)) {
    return [];
  } else {
    assume e ~ Uniform(startTime, endTime);
    return join([[e], sampleEventTimes(subi(nEvents, 1), startTime, endTime)]);
  }
} 

// This will compute the log likelilihood of sampling nEvents sorted uniform variables on the given interval
// The pdf is 1/n! 1 / (b - a)^n I_{[a, b]^n}(x) -- the factorial comes from sorting the array
function sortedUniformLogDebt(
  nEvents: Int, startTime: Real, endTime: Real
): Real {
  if (eqi(nEvents, 0)) {
    return 0.0;
  } else {
    let intLength = endTime - startTime;
    return (
      -(log(intLength) + log(int2real(nEvents)))
      + sortedUniformLogDebt(subi(nEvents, 1), startTime, endTime)
    );

  }
}

// FB-algorithm for sampling Markov chain conditioned on start and end states
function forwardsBackardsAlgorithm(
  kernel: Tensor[Real], startIndex: Int, endIndex: Int, nEvents: Int
): UBranchEventsAndDebt {
    // Compute the backwards messages
    let backwardsKernel = mtxTrans(kernel);
    let backwardMsgs = backwardsMessages(
      nEvents,
      backwardsKernel,
      mtxGetRow(addi(endIndex, 1), backwardsKernel) // We compute the first message outside the function
    );
    // Sample the chain forwards in time
    let samples = sampleForwards(0, kernel, startIndex, backwardMsgs, nEvents);
    return samples;
}

// Compute backward messages -- they propagate the information from the end state
function backwardsMessages(
  i: Int, mat: Tensor[Real], curr: Tensor[Real]
) : Tensor[Real][] {
    if (eqi(i, 0)) {
      return [];
    } else {
      let next = mtxMul(curr, mat);
      return join(
        [[curr], backwardsMessages(subi(i, 1), mat, next)]
      );
    }
}

// Sample the markov chain forwards in time, using the information about the end state in the backwards messages
function sampleForwards(
  i: Int,
  kernel: Tensor[Real],
  prevI: Int,
  backwardMsgs: Tensor[Real][],
  nEvents: Int
): UBranchEventsAndDebt {
  if (eqi(i, nEvents)) {
    return UBranchEventsAndDebt{ events = [], logDebt = 0.0};
  } else {
    let forward = mtxGetRow(addi(prevI, 1), kernel); // The forward transition probabilities is just the correct row vector of the kernel
    let backward = backwardMsgs[subi(nEvents, i)]; // Get the backward transition probabilities 
    let totMsg = normalizeVector(
      mtxTrans(
        matrixElemMul(forward, backward)
      )
    );  // Compute the full messsage -- `normalizeVector` does not work on row-vectors, so transpose
    let stateProbs = rowMatrixToSeq(totMsg);
    // printLn(join(["Sampling event ", int2string(i)]));
    // printSeqFloat(stateProbs);
    assume sample ~ Categorical(stateProbs); // Sample the next state
    // printLn(join(["Sampled state ", int2string(sample)]));
    let currDebt = categoricalLogPmf(stateProbs, sample);
    // Go to the next state in the chain.
    let nextStep = sampleForwards(addi(i, 1), kernel, sample, backwardMsgs, nEvents);
    // It would be more natural to use "cons" here, but it seems to be outside the scope of TreePPL
    return UBranchEventsAndDebt{
      events = join([[sample], nextStep.events]),
      logDebt = currDebt + nextStep.logDebt
    };
  }
}

function rowMatrixToSeq(mat: Tensor[Real]) {
  let size = dim(mat)[1];
  return sapply(
    range(1, addi(size, 1), 1),
    function (i: Int) {
      return mtxGet(i, 1, mat);
    }
  );
}
/*
 *  UNIFORMIZATION FUNCTIONS END HERE
 */


// Simulate repertoire evolution from full model, one event
// at a time. We return the sequence of repertoires. We
// accumulate scores here rather than introducing observe
// statements, as those observes would not be aligned.
function simulate_by_event (repertoire: Int[], eventSeq: Event[], event_index: Int,
	from_age: Real, end_age: Real, mp: ModelParams, log_debt: Real) : HistoryScore {

	// End case, deal with last time segment
	if gti(event_index, length(eventSeq)) {          
		let change_rate = total_rate(repertoire, mp);
		return HistoryScore{log_score = poissonLogScore(0, 
      PoissonParam{rate = change_rate*(from_age-end_age)}), history = []};
	}

	// Typical case
	let the_event = eventSeq[event_index];
	let rate = getRate(repertoire, the_event.host, the_event.to_state, mp);
	let change_rate = total_rate(repertoire, mp);
	
  let exp_log_prob = exponentialLogScore(from_age - the_event.age, ExponentialParam{rate=change_rate});
  let logScore = exp_log_prob + log(rate/change_rate);

  // Update repertoire with the change in the_event
  let new_repertoire = sapplyi1(repertoire, getNewState, the_event);
	let hp = HistoryPoint{age = the_event.age, repertoire = new_repertoire};
  // Simulate next event
	let simHist = simulate_by_event(new_repertoire, eventSeq, addi(event_index,1), the_event.age, end_age, mp, log_debt);

	return HistoryScore{log_score = simHist.log_score + logScore, history = join([simHist.history, [hp]])};
}

// Update host states
function getNewState(i: Int, state: Int, event: Event): Int {
	if ( eqi(i, event.host) ) {
	  return event.to_state;
	} else {
	  return state;
	}
}

// Compute rate for a proposed event
function getRate (repertoire: Int[], host_index: Int, to_state: Int, mp: ModelParams): Real {

  let from_state = repertoire[host_index];
  let base_rate = mtxGet(addi(from_state,1), addi(to_state,1), mp.qMatrix);

  // Losses are easy, no cross-repertoire modification used here
  if (gti(from_state, to_state)) {
    // The rejection sampling we have done previously ensure that sequence does
    // not contain illegal transitions so we can just return the base rate.
    // However, we add a check here for the time being
    let n2s = fold(count2s, 0, repertoire);
    if (eqi(from_state, 2) && eqi(n2s, 1)) {
      error("INVALID REPERTOIRE; THIS SHOULD HAVE BEEN CAUGHT BEFORE!");
    }
    return base_rate;
  } else {
    
    // We have a gain rate, so we need to factor in beta-dependent cross-repertoire effect
    if (eqi(from_state, 0)) {
      let current_hosts = whichTrue(sapply(repertoire, is1or2)); 
      let dist = tensorMean(mtxRowCols(mp.dMatrix, host_index, current_hosts));
      return base_rate * pow(dist/mp.dMean, -mp.beta);
    } else {
      let current_hosts = whichTrue(sapply(repertoire, is2));   
      let dist = tensorMean(mtxRowCols(mp.dMatrix, host_index, current_hosts));
      return base_rate * pow(dist/mp.dMean, -mp.beta);
    }
  }
}

// Compute total rate of change from a repertoire
function total_rate (repertoire: Int[], mp: ModelParams): Real {

	let n1s = fold(count1s, 0, repertoire);
	let totalLoss1 = Real(n1s) * mtxGet(2, 1, mp.qMatrix);
	let n2s = fold(count2s, 0, repertoire);
	let totalLoss2 = getLoss2(Real(n2s), mp);

  let gainsSeq = sapplyi2(repertoire, gainsIf0or1, repertoire, mp);
	let totalGains = seqSumReal(gainsSeq);

  return totalLoss1 + totalLoss2 + totalGains;
}

function getLoss2 (n2s: Real, mp: ModelParams): Real {
  if n2s <= 1.0 {
		let totalLoss2 = 0.0;
    return totalLoss2;
	} else {
		let totalLoss2 = n2s * mtxGet(3, 2, mp.qMatrix);
    return totalLoss2;
	}
}

function gainsIf0or1 (i: Int, from_state: Int, repertoire: Int[], mp: ModelParams): Real {
	
	if (eqi(from_state, 0) || eqi(from_state, 1)) {
		return getRate(repertoire, i, addi(from_state,1), mp);
	} else {
		return 0.0;
	}
}

// Accumulate the total log debt of proposing the
// ancestral repertoires in the tree.
function get_rep_debt (tree: HistoryTree): Real {

  if tree is HistoryLeaf {
		return tree.log_rep_debt;
	} else{
			return  get_rep_debt(tree.left) + get_rep_debt(tree.right);
	}
}

function all_times_valid_rep(currRep: Int[], pHist: ProposedHistory, eventSeq: Event[], eventIndex: Int): Bool {
  let n_events = length(eventSeq);
  if gti(eventIndex, n_events) {
    // We reached the end of the proposed history, the repertoire was valid!
    return true;
  } else {

    let event = eventSeq[eventIndex];
    if (eqi(event.from_state, 2)) {
      let n2s = fold(count2s, 0, currRep);
      if eqi(n2s, 1) {
        // We have a loss event on repertoire with a single true hosts, so it is invalid
        return false;
      }
    }
    // The repertoire is still valid, update it with the new event
    let hostIndex = event.host;
    let newRep = join(
      [
        slice(currRep, 1, hostIndex),
        [event.to_state],
        slice(currRep, addi(hostIndex, 1), addi(length(currRep), 1))
      ]
    );
    return all_times_valid_rep(
      newRep,
      pHist, 
      eventSeq,
      addi(eventIndex, 1)
    );
  }
}

/*---------------- Help functions --------------------------*/


function createProbRecord(p: Tensor[Real]): CategoricalParam {
  // This version works on tests, but not here
  // let ncol = dim(p)[2];
	// let ps = rep(ncol, p);
	// let p_seq = zipWith(getRowVecElem, ps, 1 to ncol); 

  // Hard-coded version
  let p1 = getRowVecElem(p, 1);                
	let p2 = getRowVecElem(p, 2);
	let p3 = getRowVecElem(p, 3);
	let p_seq = [p1,p2,p3];
  return CategoricalParam {probs = p_seq};
}

function getRowVecElem(t: Tensor[Real], i: Int): Real {
  return mtxGet(1, i, t);
}

// Calculate stationary probabilities from lambda values
function stationaryProbs(lambda: Real[]): Tensor[Real] {
  let pi_1 = 1.0 / (1.0 + (lambda[2]/lambda[1]) + (lambda[3]/lambda[4]));
  let pi_0 = pi_1 * (lambda[2]/lambda[1]);
  let pi_2 = 1.0 - pi_0 - pi_1;
  return rvecCreate(3, [pi_0, pi_1, pi_2]);
}

// Comment (Erik 07-03-2025): The functions below should most likely be replaced by anonymnous functions
function getMsgTreeAge(tree: MsgTree) : Real {
	return tree.age;
}

function getMsgTreeMsg(tree: MsgTree) : Tensor[Real][] {
	return tree.out_msg;
}

function getProbsTreeAge(tree: ProbsTree) : Real {
	return tree.age;
}

function getProbs(tree: ProbsTree): Tensor[Real][]{
	return tree.probs;
}

function subAge(left: Event, right: Event): Int {
  let diff = subf(right.age, left.age);
  if (diff >= 0.0){
    return 1;
  } else {
			return subi(1,2);  // type error if I just write -1
	}
}

function count2s(count: Int, host: Int): Int {
	if (eqi(host, 2)) {
		return addi(count, 1);
	} else {
			return count;
	}
}

function count1s(count: Int, host: Int): Int {
	if (eqi(host, 1)) {
		return addi(count, 1);
	} else {
			return count;
	}
}

function is2(x: Int): Bool {
  if (eqi(x, 2)) {
    return true;
  } else {
      return false;
  }
}

function is1or2(x: Int): Bool {
  if (eqi(x,1) || eqi(x,2)) { 
    return true;
  } else {
			return false;
	}
}

/*
 * Extra printing function 
 */
function printSeqMat(seq: Tensor[Real][]): () {
    printLn("Matrix sequence");
    printSeqMatHelper(seq, 1, length(seq));
}

function printSeqMatHelper(seq: Tensor[Real][], i: Int, n: Int): () {
    if (eqi(i, n)) {
        printMtx(seq[i]);
    } else {
        printMtx(seq[i]);
        print(", ");
        printSeqMatHelper(seq, addi(i, 1), n);
    }
}

function printSeqInt(seq: Int[]): () {
    print("[");
    printSeqIntHelper(seq, 1, length(seq));
    printLn("]");
}

function printSeqIntHelper(seq: Int[], i: Int, n: Int): () {
    if (eqi(i, n)) {
        print(int2string(seq[i]));
    } else {
        print(int2string(seq[i]));
        print(", ");
        printSeqIntHelper(seq, addi(i, 1), n);
    }
}

function printSeqFloat(seq: Real[]): () {
    print("[");
    printSeqFloatHelper(seq, 1, length(seq));
    printLn("]");
}

function printSeqFloatHelper(seq: Real[], i: Int, n: Int): () {
    if (eqi(i, n)) {
        print(real2string(seq[i]));
    } else {
        print(real2string(seq[i]));
        print(", ");
        printSeqFloatHelper(seq, addi(i, 1), n);
    }
}

function printProposedHistory(pHist: ProposedHistory) {
  printLn(join([
    "ProposedHistory with debt ",
    real2string(pHist.log_debt)
  ]));
  printLn(join(["Events: [", eventSeqStr(1, pHist.events), "]"]));
}
function printEventSeq(events: Event[]) {
  printLn(join(["Events: [", eventSeqStr(1, events), "]"]));
}
function eventSeqStr(i: Int, events: Event[]) {
  if (eqi(length(events), 0)) {
    return "";
  }
  let getEventStr = function (event: Event) {
    return join(
      [
        "(",
        int2string(event.host),
        ": ",
        int2string(event.from_state),
        "->",
        int2string(event.to_state),
        ", ",
        real2string(event.age),
        ")"
      ]
    );
  };
  if (eqi(i, length(events))) {
    return getEventStr(events[i]);
  } else {
    let eventStr = getEventStr(events[i]);
    return join([eventStr, ", ", eventSeqStr(addi(i, 1), events)]);
  }
}