import "stdlib::seq.mc"
import "lib.mc"
import "container-types.tppl"
import "helpers.tppl"
import "belief-propagation.tppl"
import "dist-helpers.tppl"
import "full-model.tppl"
import "uniformization-helpers.tppl"
import "forward-backward-algorithm.tppl"
import "rb-drift-kernels.tppl"
import "custom-debug-info.tppl"
import "independence-model.tppl"

type ReturnType = ReturnType{
  lambda: Real[], mu: Real, beta: Real, tree: HistoryTree
}


model function rejectAccept(
  symbiont_tree: TreeLabeled,
  ntips: Int,
  nhosts: Int,
  interactions: Int[],
  host_distances: Real[],
  dMean: Real,
  tune: Real
): ReturnType {
//printLn(">>>>>  ALIGNED: LAMBDA");
  assume lambda ~ Dirichlet([1., 1., 1., 1.]) drift rbLambdaMove(lambda);
//printLn("<<<<<  ALIGNED: LAMBDA");
//  printLn(">>>>>  ALIGNED: MU");
  assume mu ~ Exponential(10.) drift rbMuMove(mu);
  //printLn("<<<<<  ALIGNED: MU");
//  printLn(">>>>>  ALIGNED: BETA");
  assume beta ~ Exponential(1.) drift rbBetaMove(beta);
  // printLn("<<<<<  ALIGNED: BETA");

  let r = mtxCreate(3,3,
    [0.-lambda[1],                lambda[1],          0.0,
        lambda[2], 0.-(lambda[2]+lambda[3]),    lambda[3],
              0.0,                lambda[4], 0.-lambda[4]]
  );
  let qMatrix = mtxSclrMul(mu, r);


  let nestedInteractions = nestList(interactions, ntips, nhosts);
  let postorderTree = postorderTraverse(symbiont_tree, qMatrix, nestedInteractions, nhosts);

  // Sample the root. We assume in both the independence and full model
  // that we have a flat prior on the root
  let rootPrior = mtxCreate(nhosts, 3, ones(3 * nhosts));
  let rootSamplingProb = mtxElemMul(postorderTree.outMsg, rootPrior);
  let initRootRep = suggestRepAligned(rootSamplingProb, 1, nhosts);
  let rootRep = suggestRepRS(rootSamplingProb, nhosts, initRootRep, 0);

  // Calculate the debt and excess
  let rootLogDebt = getRepertoireDebt(rootRep, rootSamplingProb, nhosts);
  let rootLogExcess = -log((3.^(Real(nhosts))) - (2.^Real(nhosts)));

  // This is an aligned point so we can weight by the importance ratio
  logWeight rootLogExcess - rootLogDebt;

  // Compute messages to pass to pass to the children of the root
  let newMsg = mtxCreate(nhosts, 3, observationMessage(rootRep, 1, nhosts));
  let leftMsg = mtxMul(newMsg, postorderTree.leftKernel);
  let rightMsg = mtxMul(newMsg, postorderTree.rightKernel);

  // Construct an object containing the rate matrix in a suitable format for sampling 
  // from the embedded Markov chain

  let embeddedQMatrix = rateMatrixToEmbeddedMarkovChain(qMatrix);
  let modelParams = ModelParams {
    beta = beta,
    hostMetric = mtxCreate(nhosts, nhosts, host_distances),
    embeddedQMatrix = embeddedQMatrix,
    meanDist = dMean
  };
  let unifParams = rateMatrixToUnifMatrix(qMatrix);
  let rootAge = postorderTree.age;
  let leftRepertoireTree = sampleTreeHistory(
    postorderTree.left, nhosts, leftMsg, rootRep, rootAge, modelParams, unifParams, postorderTree.leftKernel
  );
  let rightRepertoireTree = sampleTreeHistory(
    postorderTree.right, nhosts, rightMsg, rootRep, rootAge, modelParams, unifParams, postorderTree.rightKernel

  );

  // Construct the root node of the repertoire tree
  let historyTree = HistoryNode {
    age = symbiont_tree.age, label = symbiont_tree.label,
    left = leftRepertoireTree, right = rightRepertoireTree,
    repertoire = rootRep, history = []
  };
  return ReturnType {
    lambda = lambda,
    mu = mu,
    beta = beta,
    tree = historyTree
  };
} 

function suggestRepAligned(msg: Matrix[Real], i: Int, max: Int) {
  if i <= max {
    let param = mtx3ToSeq(msg, i);
//  printLn(join([">>>>>  ALIGNED: NODE ", int2string(i)]));
    assume x ~ Categorical(param) drift categoricalMove(x, param); 
    //printLn(join(["<<<<<  ALIGNED: NODE ", int2string(i)]));
    return cons(x, suggestRepAligned(msg, i + 1, max));
  } else {
    return [];
  }
}

function suggestRepRS(msg: Matrix[Real], max: Int, initialRep: Int[], depth: Int) {
  let _REP_REJECTION_DEPTH = 10;
  if any(is2, initialRep) {
    return initialRep;
  } else {
    if depth < _REP_REJECTION_DEPTH {
      let newRep = suggestRepUnaligned(msg, 1, max);
      return suggestRepRS(msg, max, newRep, depth + 1);
    } else {
      // Set weight to zero and return dummy value
      weight 0.0;
      return initialRep;
    }
  }
}

function suggestRepUnaligned(msg: Matrix[Real], i: Int, max: Int) {
  if i <= max {
    let param = mtx3ToSeq(msg, i);
    // printLn(join([">>>>>UNALIGNED: NODE ", int2string(i)]));
    assume x ~ Categorical(param); 
    // printLn(join(["<<<<<UNALIGNED: NODE ", int2string(i)]));
    return join([[x], suggestRepUnaligned(msg, i + 1, max)]);
  } else {
    return [];
  }
}

function sampleTreeHistory(
  tree: MsgTree,
  nhosts: Int,
  preorderMsg: Matrix[Real],
  parentRep: Int[],
  parentAge: Real,
  modelParams: ModelParams,
  unifParams: UniformizationParams,
  branchKernel: Matrix[Real]
): HistoryTree {
  if tree is MsgLeaf {
    // We are at a leaf, so we don't need to sample the interactions
    let rep = tree.interactions;
    // Sample the incident branch
    let branchSample = sampleBranch(
      parentRep,
      rep,
      parentAge,
      tree.age,
      nhosts,
      modelParams,
      unifParams,
      branchKernel,
      0
    );
    /*
    debugNode(
      "Leaf",
      tree.label,
      branchSample.logDebt,
      branchSample.logExcess,
      0.0
    );
    */
    // We are aligned so we can weight the program here (shouldn't matter for MCMC)
    if branchSample.success {
      logWeight branchSample.logExcess - branchSample.logDebt;
    } else {
      // We failed to sample a correct branch, set program weight to zero
      weight 0.0;
    }

    return HistoryLeaf {
      age = tree.age,
      label = tree.label,
      repertoire = rep,
      history = branchSample.history
    };
  } else {
    let samplingProb = mtxElemMul(tree.outMsg, preorderMsg);
    let initRep = suggestRepAligned(samplingProb, 1, nhosts);
    let rep = suggestRepRS(samplingProb, nhosts, initRep, 0);
    let nodeLogDebt = getRepertoireDebt(rep, samplingProb, nhosts);

    // Sample the incident branch
    let branchSample = sampleBranch(
      parentRep,
      rep,
      parentAge,
      tree.age,
      nhosts,
      modelParams,
      unifParams,
      branchKernel,
      0
    );
    /*
    debugNode(
      "Node",
      tree.label,
      branchSample.logDebt,
      branchSample.logExcess,
      nodeLogDebt
    );
    */
    // We are aligned so we can weight the program here (shouldn't matter for MCMC)
    if branchSample.success {
      logWeight branchSample.logExcess - branchSample.logDebt - nodeLogDebt;
    } else {
      weight 0.0;
    }

    // Since we sampled a repertoire at the node we should propagate this information to the child nodes
    let newMsg = mtxCreate(nhosts, 3, observationMessage(rep, 1, nhosts));
    let leftMsg = mtxMul(newMsg, tree.leftKernel);
    let rightMsg = mtxMul(newMsg, tree.rightKernel);

    // Sample the two subtrees
    let left = sampleTreeHistory(
      tree.left, nhosts, leftMsg, rep, tree.age, modelParams, unifParams, tree.leftKernel
    );
    let right = sampleTreeHistory(
      tree.right, nhosts, rightMsg, rep, tree.age, modelParams, unifParams, tree.rightKernel
    );

    return HistoryNode {
      age = tree.age,
      label = tree.label,
      repertoire = rep,
      history = branchSample.history,
      left = left,
      right = right
    };
  }
}

function sampleBranch(
  startRep: Int[],
  finalRep: Int[],
  startAge: Real,
  finalAge: Real,
  nhosts: Int,
  modelParams: ModelParams,
  unifParams: UniformizationParams,
  branchKernel: Matrix[Real],
  rejectionDepth: Int
): CorrectedBranchSample {
  let _MAX_REJECTION_DEPTH_BRANCH = 100;
  if rejectionDepth <= _MAX_REJECTION_DEPTH_BRANCH {
    // Sample the events per host
    let unorderedBranch = sampleUnorderedBranch(
      startRep, finalRep, startAge, finalAge, 1, nhosts, unifParams, modelParams.embeddedQMatrix
    );

    // Compile the events for all hosts and sort them
    let allHostEvents = join(unorderedBranch.history);
    let orderedEvents = qSort(compAge, allHostEvents);
    let nEvents = length(orderedEvents);
    if allTimesValidBranch(startRep, orderedEvents, 1, nEvents, nhosts) {
      // The branch is correct along the full history, 
      // accept and calculate the true weight of the sample
      
      // Calculate the debt -- this is the density of the endpoint conditioned
      // (parallel) chains at the current sample. 
      let logDebt = independenceLikelihoodEndCond(
        startRep, finalRep, startAge, finalAge, unorderedBranch.history, modelParams, branchKernel
      );
      // Calculate the likelihood of the path under the full model
      let logExcess = fullModelWeight(
        1, startRep, finalRep, startAge, finalAge, orderedEvents, nEvents, nhosts, modelParams
      );
      // Return the branch sample with both the debt and the excess
      return CorrectedBranchSample {
        history = orderedEvents,
        logDebt = logDebt,
        logExcess = logExcess,
        success = true
      };
    } else {
      // The repertoire was invalid somewhere along the branch, reject and sample again
      return sampleBranch(
        startRep,
        finalRep,
        startAge,
        finalAge,
        nhosts,
        modelParams,
        unifParams,
        branchKernel,
        rejectionDepth + 1
      );
    }
  } else {
    // We ran out of rejection depth for the branch
    return CorrectedBranchSample {
      history = [],
      logDebt = -log(0.0),
      logExcess = log(0.0),
      success = false
    };   
  }
}

function compAge(left: Event, right: Event): Int {
  if (isNaN(right.eventTime)) {
    return -1;
  } 
  if (isNaN(left.eventTime)) {
    return 1;
  } 
  if (right.eventTime >= left.eventTime) {
    return 1;
  } else {
    return -1;
  }
}

function sampleUnorderedBranch(
  startRep: Int[],
  finalRep: Int[],
  startAge: Real,
  finalAge: Real,
  hostIndex: Int,
  nhosts: Int,
  unifParams: UniformizationParams,
  embeddedQMatrix: EmbeddedMarkovChainMatrix
): BranchSample {
  // Note that startAge > finalAge since the tree is moving forwards in time
  if hostIndex <= nhosts {
    let hostHistory = sampleHostHistory(
      startRep[hostIndex], finalRep[hostIndex], startAge, finalAge, hostIndex, unifParams, embeddedQMatrix
    );
    let otherHostHistories = sampleUnorderedBranch(
      startRep, finalRep, startAge, finalAge, hostIndex + 1, nhosts, unifParams, embeddedQMatrix
    );
    return BranchSample {
      history = cons(hostHistory.history, otherHostHistories.history),
      success = otherHostHistories.success
    };
  } else {
    return BranchSample {
      history = [],
      success = true
    };
  }
}


function sampleHostHistory(
  startState: Int,
  finalState: Int,
  startAge: Real,
  finalAge: Real,
  host: Int,
  unifParams: UniformizationParams,
  embeddedQMatrix: EmbeddedMarkovChainMatrix
): HostBranchSample {
  /* 
   * This function produces samples from the random variable
   *     X(t) | X(0) = a, X(T) = b
   * i.e. the endpoint conditioned CTMC. To pay back 
   * the debt from this subprocedure we therefore must account 
   * for the end point conditioning 
   */

  // Sample the number of events on the branch
  assume u ~ Uniform(0., 1.);
  let nEvents = invTransSampleNEvents(
    u, unifParams, startAge - finalAge, startState, finalState
  );

  // Sample when they occur
  let eventTimes = getEventTimes(nEvents, startAge, finalAge);

  // Sample how they occur
  let markovChain = forwardsBackardsAlgorithm(
    unifParams.uMatrix,
    startState, 
    finalState,
    nEvents
  );

  // Create proper events
  let eventsWithSelf = zipWith(
    function(t: MCTransition, eT: Real) {
      return Event {
        fromState = t.fromState,
        toState = t.toState,
        eventTime = eT,
        host = host
      };
    },
    markovChain,
    eventTimes
  );

  // Remove self transitions
  let events = fold(
    function(acc: Event[], e: Event) {
      if (e.fromState == e.toState) {
        return acc;
      } else {
        // Not sure if there is an `append`?
        // (Could be written with foldr, but might confuse)
        return join([
          acc,
          [e]
        ]);
      }
    },
    [],
    eventsWithSelf
  );

  return HostBranchSample {
    history = events, 
    success = true
  };
}
