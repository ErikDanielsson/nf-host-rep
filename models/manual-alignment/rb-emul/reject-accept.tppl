import "stdlib::seq.mc"
import "lib.mc"
import "container-types.tppl"
import "helpers.tppl"
import "belief-propagation.tppl"
import "dist-helpers.tppl"
import "full-model.tppl"
import "print-helpers.tppl"
import "rb-drift-kernels.tppl"

type ReturnType = ReturnType{
  lambda: Real[], mu: Real, beta: Real, tree: HistoryTree
}


model function rejectAccept(
  symbiont_tree: TreeLabeled,
  ntips: Int,
  nhosts: Int,
  interactions: Int[],
  host_distances: Real[],
  dMean: Real,
  tune: Real
): ReturnType {
//  printLn(">>>>>  ALIGNED: LAMBDA");
  assume lambda ~ Dirichlet([1., 1., 1., 1.]) drift rbLambdaMove(lambda);
  // printSeq(lambda, 1, 4);
  //printLn("<<<<<  ALIGNED: LAMBDA");
//  printLn(">>>>>  ALIGNED: MU");
  assume mu ~ Exponential(10.) drift rbMuMove(mu);
  //printLn("<<<<<  ALIGNED: MU");
//  printLn(">>>>>  ALIGNED: BETA");
  assume beta ~ Exponential(1.) drift rbBetaMove(beta);
  // printLn("<<<<<  ALIGNED: BETA");

  let r = mtxCreate(3,3,
    [0.-lambda[1],                lambda[1],          0.0,
        lambda[2], 0.-(lambda[2]+lambda[3]),    lambda[3],
              0.0,                lambda[4], 0.-lambda[4]]
  );
  let qMatrix = mtxSclrMul(mu, r);


  let nestedInteractions = nestList(interactions, nhosts, nhosts);
  let postorderTree = postorderTraverse(symbiont_tree, qMatrix, nestedInteractions, nhosts);

  // Sample the root. We assume in both the independence and full model
  // that we have a flat prior on the root
  let rootPrior = mtxCreate(nhosts, 3, ones(3 * nhosts));
  let rootSamplingProb = mtxElemMul(postorderTree.outMsg, rootPrior);
  let initRootRep = suggestRepAligned(rootSamplingProb, 1, nhosts);
  let rootRep = suggestRepRS(rootSamplingProb, nhosts, initRootRep, 0);
//  printLn("    root rep");
//  printSeqInt(rootRep, 1, nhosts);

  // Calculate the debt and excess
  let rootLogDebt = getRepertoireDebt(rootRep, rootSamplingProb, nhosts);
  let rootLogExcess = -log((3.^(Real(nhosts))) - (2.^Real(nhosts)));

  // This is an aligned point so we can weight by the importance ratio
  logWeight rootLogExcess - rootLogDebt;

  // Compute messages to pass to pass to the children of the root
  let newMsg = mtxCreate(nhosts, 3, observationMessage(rootRep, 1, nhosts));
  let leftMsg = mtxMul(newMsg, postorderTree.leftKernel);
  let rightMsg = mtxMul(newMsg, postorderTree.rightKernel);

  // Construct an object containing the rate matrix in a suitable format for sampling 
  // from the embedded Markov chain

  let embeddedQMatrix = rateMatrixToEmbeddedMarkovChain(qMatrix);
  let modelParams = ModelParams {
    beta = beta,
    hostMetric = mtxCreate(nhosts, nhosts, host_distances),
    embeddedQMatrix = embeddedQMatrix,
    meanDist = dMean
  };
  let rootAge = postorderTree.age;
  let leftRepertoireTree = sampleTreeHistory(
    postorderTree.left, nhosts, leftMsg, rootRep, rootAge, modelParams
  );
  let rightRepertoireTree = sampleTreeHistory(
    postorderTree.right, nhosts, rightMsg, rootRep, rootAge, modelParams
  );

  // Construct the root node of the repertoire tree
  let historyTree = HistoryNode {
    age = symbiont_tree.age, label = symbiont_tree.label,
    left = leftRepertoireTree, right = rightRepertoireTree,
    repertoire = rootRep, history = []
  };
  return ReturnType {
    lambda = lambda,
    mu = mu,
    beta = beta,
    tree = historyTree
  };
} 

function suggestRepAligned(msg: Matrix[Real], i: Int, max: Int) {
  if i <= max {
    let param = mtx3ToSeq(msg, i);
//  printLn(join([">>>>>  ALIGNED: NODE ", int2string(i)]));
    assume x ~ Categorical(param) drift categoricalMove(x, param); 
    //printLn(join(["<<<<<  ALIGNED: NODE ", int2string(i)]));
    return cons(x, suggestRepAligned(msg, i + 1, max));
  } else {
    return [];
  }
}

function suggestRepRS(msg: Matrix[Real], max: Int, initialRep: Int[], depth: Int) {
  let _REP_REJECTION_DEPTH = 10;
  if any(is2, initialRep) {
    return initialRep;
  } else {
    if depth < _REP_REJECTION_DEPTH {
      let newRep = suggestRepUnaligned(msg, 1, max);
      return suggestRepRS(msg, max, newRep, depth + 1);
    } else {
      // Set weight to zero and return dummy value
      weight 0.0;
      return initialRep;
    }
  }
}

function suggestRepUnaligned(msg: Matrix[Real], i: Int, max: Int) {
  if i <= max {
    let param = mtx3ToSeq(msg, i);
    // printLn("Unaligned");
    // printSeq(param, 1, 3);
    // printLn(join([">>>>>UNALIGNED: NODE ", int2string(i)]));
    assume x ~ Categorical(param); 
    // printLn(join(["<<<<<UNALIGNED: NODE ", int2string(i)]));
    return join([[x], suggestRepUnaligned(msg, i + 1, max)]);
  } else {
    return [];
  }
}

function sampleTreeHistory(
  tree: MsgTree,
  nhosts: Int,
  preorderMsg: Matrix[Real],
  parentRep: Int[],
  parentAge: Real,
  modelParams: ModelParams
): HistoryTree {
  if tree is MsgLeaf {
    // printLn(join(["       sample start leaf ", int2string(tree.label)]));
    //let samplingProb = mtxElemMul(tree.outMsg, preorderMsg);
    // printLn("Leaf");
    // printMtx(samplingProb);
    //let initRep = suggestRepAligned(samplingProb, 1, nhosts);
    // let rep = suggestRepRS(samplingProb, nhosts, initRep);
    // let nodeLogDebt = getRepertoireDebt(rep, samplingProb, nhosts);

    // We are at a leaf, so we don't need to sample the interactions
    let rep = tree.interactions;
    // Sample the incident branch
    let branchSample = sampleBranch(
      parentRep, rep, parentAge, tree.age, nhosts, modelParams
    );

    // We are aligned so we can weight the program here (shouldn't matter for MCMC)
    logWeight branchSample.logExcess - branchSample.logDebt;

    // printLn(join(["       sample start leaf ", int2string(tree.label)]));
    return HistoryLeaf {
      age = tree.age,
      label = tree.label,
      repertoire = rep,
      history = branchSample.history
    };
  } else {
    // printLn(join(["       sample start node ", int2string(tree.label)]));
    let samplingProb = mtxElemMul(tree.outMsg, preorderMsg);
    let initRep = suggestRepAligned(samplingProb, 1, nhosts);
    let rep = suggestRepRS(samplingProb, nhosts, initRep, 0);
    let nodeLogDebt = getRepertoireDebt(rep, samplingProb, nhosts);
//  printLn(join(["    node rep ", int2string(tree.label)]));
//  printSeqInt(rep, 1, nhosts);
//  printLn(join(["    parent rep ", int2string(tree.label)]));
//  printSeqInt(parentRep, 1, nhosts);

    // Sample the incident branch
    let branchSample = sampleBranch(
      parentRep, rep, parentAge, tree.age, nhosts, modelParams
    );

    // We are aligned so we can weight the program here (shouldn't matter for MCMC)
    /*
    printLn(join([
      "    logdebt: ", real2string(branchSample.logDebt),
      ", nodelogdebt: ", real2string(nodeLogDebt),
      ", logexcess: ", real2string(branchSample.logExcess)
    ]));
    */
    //printLn(join(["    node log weight ", real2string(branchSample.logExcess - branchSample.logDebt - nodeLogDebt)]));
    logWeight branchSample.logExcess - branchSample.logDebt - nodeLogDebt;

    // Since we sampled a repertoire at the node we should propagate this information to the child nodes
    let newMsg = mtxCreate(nhosts, 3, observationMessage(rep, 1, nhosts));
    let leftMsg = mtxMul(newMsg, tree.leftKernel);
    let rightMsg = mtxMul(newMsg, tree.rightKernel);

    // printLn(join(["       sample done  node ", int2string(tree.label)]));
    // Sample the two subtrees
    let left = sampleTreeHistory(
      tree.left, nhosts, leftMsg, rep, tree.age, modelParams
    );
    let right = sampleTreeHistory(
      tree.right, nhosts, rightMsg, rep, tree.age, modelParams
    );

    return HistoryNode {
      age = tree.age,
      label = tree.label,
      repertoire = rep,
      history = branchSample.history,
      left = left,
      right = right
    };
  }
}

function sampleBranch(
  startRep: Int[],
  finalRep: Int[],
  startAge: Real,
  finalAge: Real,
  nhosts: Int,
  modelParams: ModelParams
): CorrectedBranchSample {
  // Sample the events per host
  let unorderedBranch = sampleUnorderedBranch(
    startRep, finalRep, startAge, finalAge, 1, nhosts, modelParams.embeddedQMatrix, 1
  );
  if !unorderedBranch.success {
    // If we ran out of rejection depth, set the weight to zero and return an empty history
    // printLn(join(["    no success :("]));
    // weight 0.0
    // printLn("Infinite");
    return CorrectedBranchSample {
      history = [],
      logDebt = -log(0.), 
      logExcess = 0.0
    };
  }
  // printLn(join(["    success :)"]));

  // Sort the events
  // printLn(join(["    history length ", int2string(length(unorderedBranch.history))]));
  let orderdEvents = qSort(compAge, unorderedBranch.history);
  // printLn(join(["    sorted"]));
  let nEvents = length(orderdEvents);
  if allTimesValidBranch(startRep, orderdEvents, 1, nEvents, nhosts) {
    // The branch is correct along the full history, 
    // accept and calculate the true weight of the sample
    // printLn("        accepting sample");
//  printSeqInt(startRep, 1, nhosts);
//  printSeqInt(finalRep, 1, nhosts);
//  printEvents(orderdEvents);
    let logExcess = fullModelWeight(
      1, startRep, finalRep, startAge, finalAge, orderdEvents, nEvents, nhosts, modelParams
    );
    // Return the branch sample with both the debt and the excess
    return CorrectedBranchSample {
      history = orderdEvents,
      logDebt = unorderedBranch.logDebt,
      logExcess = logExcess
    };
  } else {
    // The repertoire was invalid somewhere along the branch, reject and sample again
    // printLn("        rejecting sample");
    return sampleBranch(
      startRep, finalRep, startAge, finalAge, nhosts, modelParams
    );
  }
}

function compAge(left: Event, right: Event): Int {
  if (isNaN(right.eventTime)) {
    // printLn("nan in sort");
    return -1;
  } 
  if (isNaN(left.eventTime)) {
    // printLn("nan in sort");
    return 1;
  } 
  if (right.eventTime >= left.eventTime) {
    return 1;
  } else {
    return -1;
  }
}

function sampleUnorderedBranch(
  startRep: Int[],
  finalRep: Int[],
  startAge: Real,
  finalAge: Real,
  hostIndex: Int,
  nhosts: Int,
  embeddedQMatrix: EmbeddedMarkovChainMatrix,
  rejectionDepth: Int
): BranchSample {
  let _MAX_REJECTION_DEPTH_HOST = 100;
  // Note that startAge > finalAge since the tree is moving forwards in time
  if hostIndex <= nhosts {
    let hostHistory = sampleHostHistory(
      startRep[hostIndex], finalRep[hostIndex], startAge, finalAge, hostIndex, embeddedQMatrix, 1
    );
    // printLn(join(["    after hosthistory"]));
    if hostHistory.success {
      //printLn(join(["    success!"]));
      let otherHostHistories = sampleUnorderedBranch(
        startRep, finalRep, startAge, finalAge, hostIndex + 1, nhosts, embeddedQMatrix, 0
      );
      // printLn(join(["    rest of branch sampled ", int2string(hostIndex)]));
      return BranchSample {
        history = join([hostHistory.history, otherHostHistories.history]),
        logDebt = hostHistory.logDebt + otherHostHistories.logDebt,
        success = otherHostHistories.success
      };
    } else {
      if rejectionDepth <= _MAX_REJECTION_DEPTH_HOST {
        return sampleUnorderedBranch(
          startRep, finalRep, startAge, finalAge, hostIndex, nhosts, embeddedQMatrix, rejectionDepth + 1
        );
      } else {
        // printLn(join(["        ran out of rejection depth for host ", int2string(hostIndex)]));
        // weight 0.0;
        // printLn("Infinite");
        return BranchSample {
          history = [],
          logDebt = -log(0.),
          success = false
        };
      }
      // Set the weight to zero to resample
      /*
      weight 0.0; 
      return BranchSample {
        history = [],
        logDebt = 0.0,
        success = true
      };
      */
    }
  } else {
    return BranchSample {
      history = [],
      logDebt = 0.0,
      success = true
    };
  }
}


function sampleHostHistory(
  startState: Int,
  finalState: Int,
  startAge: Real,
  finalAge: Real,
  host: Int,
  embeddedQMatrix: EmbeddedMarkovChainMatrix,
  stepIndex: Int
): BranchSample {
  // printLn(join(["Sample host history depth ", int2string(depth)]));
  // printLn(join(["    sample host history ", int2string(host)]));
  let totalRate = embeddedQMatrix.totalRates[startState + 1];
  if startState != finalState && stepIndex == 1 {
    // If there is a mutation on the interval, sample the first event from a truncated exponential
    // printLn("    truncated");
    // printLn(join(["times: start ", real2string(startAge), " final ", real2string(finalAge)]));
    
    // printLn(join(["Start age ", real2string(startAge), " final age ", real2string(finalAge)]));
    // If the start state does not equal the final state, then there must be an event on the interval
    // so we sample from a truncated exponential. This DOES NOT result in a correct instatiation of the 
    // CTMC but since we are importance sampling, this is fine.
    // Correct sampling would include computation of a matrix exponential, see (Nielsen, 2002) or (Hobolth & Stone, 2009)
    // printLn(">>>>>UNALIGNED: TRUNCATED EXPONENTIAL");
    let t = sampleTruncatedExponential(totalRate, startAge - finalAge);
    // printLn("<<<<<UNALIGNED: TRUNCATED EXPONENTIAL");
    let timeLogDebt = truncatedExponentialLogPdf(t, totalRate, startAge - finalAge);
    let eventTime = startAge - t;

    // Sample the next event
    let param = embeddedQMatrix.transitionProbs[startState + 1];
    // printLn(">>>>>UNALIGNED: CATEGORICAL");
    assume nextState ~ Categorical(param);
    // printLn("<<<<<UNALIGNED: CATEGORICAL");
    let stateLogDebt = categoricalLogPdf(nextState, param); 
    // printLn(join(["Recurse 1 ", real2string(eventTime)]));
    let restOfHistory = sampleHostHistory(nextState, finalState, eventTime, finalAge, host, embeddedQMatrix, stepIndex + 1);
    return BranchSample {
      history = cons(
        Event { eventTime = eventTime, fromState = startState, toState = nextState, host = host },
        restOfHistory.history
      ),
      logDebt = stateLogDebt + timeLogDebt + restOfHistory.logDebt,
      success = restOfHistory.success
    };

  } else {
    // printLn("    full");
    // If the final state does not equal the start state, then we don't want to
    // force there to be events in the remaining interval
    // printLn(">>>>>UNALIGNED: EXPONENTIAL");
    assume t ~ Exponential(totalRate);
    // printLn("<<<<<UNALIGNED: EXPONENTIAL");
    let timeLogDebt = exponentialLogPdf(t, totalRate);
    if startAge - t < finalAge {
      // printLn("    overshot");
      // We overshoot so we are finished, and just save the debt
      if startState == finalState {
        return BranchSample {
          history = [],
          logDebt = timeLogDebt,
          success = true
        };
      } else {
        return BranchSample {
          history = [],
          logDebt = timeLogDebt,
          success = false
        };
      }
    } else {

      // Sample the next transition
      let param = embeddedQMatrix.transitionProbs[startState + 1];
      // printLn(">>>>>UNALIGNED: CATEGORICAL");
      assume nextState ~ Categorical(param);
      // printLn("<<<<<UNALIGNED: CATEGORICAL");
      let stateLogDebt = categoricalLogPdf(nextState, param); 

      // Record the event time
      let eventTime = startAge - t;

      // printLn("    next sample");
      // printLn(join(["Recurse 2 ", real2string(eventTime)]));
      let restOfHistory = sampleHostHistory(nextState, finalState, eventTime, finalAge, host, embeddedQMatrix, stepIndex + 1);
      return BranchSample {
        history = cons(
          Event { eventTime = eventTime, fromState = startState, toState = nextState, host = host },
          restOfHistory.history
        ),
        logDebt = stateLogDebt + timeLogDebt + restOfHistory.logDebt,
        success = restOfHistory.success
      };
    }
  }
}

/*
 * Sampling and log pdf for truncated exponential
 */ 
function sampleTruncatedExponential(rate: Real, maxT: Real): Real {
   // printLn(join(["Truncated exponential (0.0, ", real2string(maxT), ")"]));
  let uMin = exp(-rate * maxT);
   // printLn(join(["Rate ", real2string(rate)]));
   // printLn(join(["Uniform min ", real2string(uMin)]));
  // Assuming directly from the truncated distribution gave numerical errors
  assume u_ ~ Uniform(0.0, 1.0);
  let u = uMin + u_ * (1. - uMin);
   // printLn(join(["Uniform sample ", real2string(u_)]));
   // printLn(join(["Uniform min sample ", real2string(u)]));
  let expSample = -log(u) / rate;
  // printLn(join(["Exponential sample ", real2string(expSample)]));
  return expSample;
}

function truncatedExponentialLogPdf(t: Real, rate: Real, maxT: Real) {
  // The pdf is f(y) / F(maxT) where f and F are pdfs and cdfs for the exponential
  return log(rate) - t * rate - log(1. - exp(-rate * maxT));
}