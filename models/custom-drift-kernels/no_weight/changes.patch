--- ../independence/original.tppl	2025-04-02 11:47:20.661029490 +0200
+++ original.tppl	2025-04-09 14:19:16.820109299 +0200
@@ -62,7 +62,7 @@
                 left: HistoryTree, right: HistoryTree}
 
 // Type used to hold the character histories and parameter values to be outputed
-type ReturnType = ReturnType{tree: HistoryTree, lambda: Real[], mu: Real, beta: Real}
+type ReturnType = ReturnType{tree: HistoryTree, lambda: Real[], mu: Real, beta: Real, likelihood: Real}
 
 /*
  *  Model
@@ -139,10 +139,10 @@
 
   // Factor in the net debt of the proposed ancestral repertoires 
   // at nodes and leaves in the historyTree
-  logWeight( -get_rep_debt(historyTree) );
+  // logWeight( -get_rep_debt(historyTree) );
   
   // Return symbiont tree with simulated character history and parameter values
-  return ReturnType{tree = historyTree, lambda = lambda, mu = mu, beta = beta};
+  return ReturnType{tree = historyTree, lambda = lambda, mu = mu, beta = beta, likelihood = -get_rep_debt(historyTree)};
 } 
 
 
@@ -274,9 +274,12 @@
     weight 0.0; 
     resample;
   } 
+  
 
 	let stop = HistoryPoint{age = getProbsTreeAge(tree), repertoire = repertoire};
-	let history = simulate_history(start, stop, mp);
+	let historyAndWeight = simulate_history(start, stop, mp);
+  let history = historyAndWeight.history;
+  let lWeight = historyAndWeight.lWeight;
   
 	if tree is ProbsLeaf {
 
@@ -286,14 +289,14 @@
 		// Note: categorical works here because repertoire id 0-based
 		
 		return HistoryLeaf{age = tree.age, label = tree.label, repertoire = repertoire, 
-		                   history = history, log_rep_debt = log_rep_debt - log_score};
+		                   history = history, log_rep_debt = log_rep_debt - log_score + lWeight};
 	}
 
 	let left = simulate(tree.left, stop, mp, iMatrix);
 	let right = simulate(tree.right, stop, mp, iMatrix);
 
 	return HistoryNode{age = tree.age, label = tree.label, repertoire = repertoire,
-					   history = history, log_rep_debt = log_rep_debt,
+					   history = history, log_rep_debt = log_rep_debt + lWeight,
 					   left = left, right = right};
 
 }
@@ -302,7 +305,11 @@
 // Simulate history conditional on initial repertoire, start time, and end
 // time. We first propose events from the independence model and then
 // condition the simulation on those events.
-function simulate_history (from_rep: HistoryPoint, to_rep: HistoryPoint, mp: ModelParams) : HistoryPoint[] {
+type HistoryAndWeight = HistoryAndWeight {
+  history: HistoryPoint[]
+  lWeight: Real
+}
+function simulate_history (from_rep: HistoryPoint, to_rep: HistoryPoint, mp: ModelParams) : HistoryAndWeight {
 
   let proposed_unordered_events = propose_events(1, from_rep, to_rep, mp.qMatrix);
   // order events by decreasing age
@@ -312,9 +319,12 @@
     to_rep.age, mp, proposed_unordered_events.log_debt);
 	
   // Now we have both debt and score at an alignment point 
-  logWeight(history_score.log_score - proposed_unordered_events.log_debt); 
+  //logWeight(history_score.log_score - proposed_unordered_events.log_debt); 
 
-  return history_score.history;
+  return HistoryAndWeight{
+    history = history_score.history,
+    lWeight = history_score.log_score - proposed_unordered_events.log_debt
+  };
 }
 
 // Propose events from independence model
