<!-- ```{python}
fig, axd = gen_fig_axd()
for i, (k, row) in enumerate(data.iterrows()):
    fp = row["file_type"]
    if fp == "rb":
        continue
    row_data = row["pooled"].posterior.to_dataframe()
    m_key = (fp, row["model_dir"], row["model_name"])
    label = get_label(*m_key)
    color = hierarchical_palette[m_key]
    style = h_style[m_key]
    for var in vars:
        ax = axd[var]
        sns.kdeplot(
            data=row_data,
            x=var,
            color=color,
            ax=ax,
            label=label,
            legend=False,
            alpha=1.0,
            **style,
        )
        # Fill
        sns.kdeplot(
            data=row_data,
            x=var,
            color=color,
            ax=ax,
            legend=False,
            alpha=0.1,
            linewidth=0,
            fill=True,
        )

for var in vars:
    ax = axd[var]
    ax.set_xlabel(vars_to_tex[var], fontsize=12)
    ax.set_ylabel("")
    if var.startswith("lambda"):
        ax.set_xlim([0.0, 1.0])
    else:
        ax.set_xlim(left=0.0)
    gen_val = (
        data_params.loc[gen_hist_idx, "".join(var.split("_"))] / 100
        if var.startswith("lambda")
        else data_params.loc[gen_hist_idx, var]
    )
    ax.axvline(
        gen_val,
        color="red",
        linestyle="--",
        linewidth=2,
    )
    xticks = ax.get_xticks()
    ax.set_xticks(sorted(set(list(xticks) + [gen_val])))
    ax.tick_params(axis="x", labelsize=8)
    ax.tick_params(axis="y", labelsize=8)
axd["lambda_21"].legend(bbox_to_anchor=(1.0, 1.00))
fig.suptitle(f"Densities for generated dataset  #{gen_hist_idx}")
# fig.tight_layout()
"""
fig.subplots_adjust(
    hspace=0.4,  # vertical spacing between rows
    wspace=4.5,  # horizontal spacing between columns
    left=0.05,
    right=0.95,
    top=0.52,
    bottom=0.08,  # margins
)
"""
fig.show()
fig.savefig(proc_output.get_temp_dir(RUN_NAME) / f"densities.{gen_hist_idx}.pdf")
```
```{python}
fig, axd = gen_fig_axd()
for i, (k, row) in enumerate(data.iterrows()):
    fp = row["file_type"]
    if fp == "rb":
        continue
    row_data = row["pooled"].posterior.to_dataframe()
    m_key = (fp, row["model_dir"], row["model_name"])
    label = get_label(*m_key)
    color = hierarchical_palette[m_key]
    style = h_style[m_key]
    for var in vars:
        ax = axd[var]
        sns.kdeplot(
            data=row_data,
            x=var,
            color=color,
            ax=ax,
            label=label,
            legend=False,
            alpha=1.0,
            **style,
        )
        # Fill
        sns.kdeplot(
            data=row_data,
            x=var,
            color=color,
            ax=ax,
            legend=False,
            alpha=0.1,
            linewidth=0,
            fill=True,
        )

for var in vars:
    ax = axd[var]
    ax.set_xlabel(vars_to_tex[var], fontsize=12)
    ax.set_ylabel("")
    if var.startswith("lambda"):
        ax.set_xlim([0.0, 1.0])
    else:
        ax.set_xlim(left=0.0)
    gen_val = (
        data_params.loc[gen_hist_idx, "".join(var.split("_"))] / 100
        if var.startswith("lambda")
        else data_params.loc[gen_hist_idx, var]
    )
    ax.axvline(
        gen_val,
        color="red",
        linestyle="--",
        linewidth=2,
    )
    xticks = ax.get_xticks()
    ax.set_xticks(sorted(set(list(xticks) + [gen_val])))
    ax.tick_params(axis="x", labelsize=8)
    ax.tick_params(axis="y", labelsize=8)
axd["lambda_21"].legend(bbox_to_anchor=(1.0, 1.00))
fig.suptitle(f"Densities for generated dataset  #{gen_hist_idx}")
# fig.tight_layout()
"""
fig.subplots_adjust(
    hspace=0.4,  # vertical spacing between rows
    wspace=4.5,  # horizontal spacing between columns
    left=0.05,
    right=0.95,
    top=0.52,
    bottom=0.08,  # margins
)
"""
fig.show()
fig.savefig(proc_output.get_temp_dir(RUN_NAME) / f"densities.{gen_hist_idx}.pdf")
``` 

```{python}

gen_hist_idx = 1
data = df_sns.loc[(0, gen_hist_idx)]

gs_kw = dict(width_ratios=[1] * 6, height_ratios=[1] * 3)
fig = plt.figure(figsize=(12, 10))
gs = GridSpec(
    nrows=3,
    ncols=6,
    height_ratios=[1, 1, 1],
    width_ratios=[1] * 6,
    hspace=0.3,
    wspace=0.5,
)
axd = {
    "mu": fig.add_subplot(gs[0, 0:3]),
    "beta": fig.add_subplot(gs[0, 3:]),
    "lambda_01": fig.add_subplot(gs[1, 0:2]),
    "lambda_10": fig.add_subplot(gs[1, 2:4]),
    "lambda_12": fig.add_subplot(gs[2, 0:2]),
    "lambda_21": fig.add_subplot(gs[2, 2:4]),
}
"""
fig, axd = plt.subplot_mosaic(
    [
        ["mu"] * 3 + ["beta"] * 3,
        ["lambda_01"] * 2 + ["lambda_10"] * 2 + ["."] * 2,
        ["lambda_12"] * 2 + ["lambda_21"] * 2 + ["."] * 2,
    ],
    figsize=(12, 12),
    gridspec_kw=gs_kw,
    layout="constrained",
)
"""
# flat_axs = axs.flatten()
vars = ["mu", "beta", "lambda_01", "lambda_10", "lambda_12", "lambda_21"]
vars_to_tex = {
    "mu": r"$\mu$",
    "beta": r"$\beta$",
    "lambda_01": r"$\lambda_{01}$",
    "lambda_10": r"$\lambda_{10}$",
    "lambda_12": r"$\lambda_{12}$",
    "lambda_21": r"$\lambda_{21}$",
}
for i, (k, row) in enumerate(data.iterrows()):
    fp = row["file_type"]
    row_data = row["pooled"].posterior.to_dataframe()
    label = (
        f"RevBayes"
        if fp == "rb"
        else f"TreePPL:\n {row["model_dir"]}, {row["model_name"]}"
    )
    m_key = (fp, row["model_dir"], row["model_name"])
    color = hierarchical_palette[m_key]
    style = h_style[m_key]
    for var in vars:
        ax = axd[var]
        sns.kdeplot(
            data=row_data,
            x=var,
            color=color,
            ax=ax,
            label=label,
            legend=False,
            alpha=1.0,
            **style,
        )
        # Fill
        sns.kdeplot(
            data=row_data,
            x=var,
            color=color,
            ax=ax,
            legend=False,
            alpha=0.1,
            linewidth=0,
            fill=True,
        )

for var in vars:
    ax = axd[var]
    ax.set_xlabel(vars_to_tex[var], fontsize=12)
    ax.set_ylabel("")
    if var.startswith("lambda"):
        ax.set_xlim([0.0, 1.0])
    else:
        ax.set_xlim(left=0.0)
    gen_val = (
        data_params.loc[gen_hist_idx, "".join(var.split("_"))] / 100
        if var.startswith("lambda")
        else data_params.loc[gen_hist_idx, var]
    )
    ax.axvline(
        gen_val,
        color="red",
        linestyle="--",
        linewidth=2,
    )
    xticks = ax.get_xticks()
    ax.set_xticks(sorted(set(list(xticks) + [gen_val])))
    ax.tick_params(axis="x", labelsize=8)
    ax.tick_params(axis="y", labelsize=8)
axd["lambda_21"].legend(bbox_to_anchor=(1.0, 1.00))
fig.suptitle(f"Densities for generated dataset  #{gen_hist_idx}")
# fig.tight_layout()
"""
fig.subplots_adjust(
    hspace=0.4,  # vertical spacing between rows
    wspace=4.5,  # horizontal spacing between columns
    left=0.05,
    right=0.95,
    top=0.52,
    bottom=0.08,  # margins
)
"""
fig.show()
fig.savefig(proc_output.get_temp_dir(RUN_NAME) / f"densities.{gen_hist_idx}.pdf")
```

```{python}

gen_hist_idx = 2
data = df_sns.loc[(0, gen_hist_idx)]

gs_kw = dict(width_ratios=[1] * 6, height_ratios=[1] * 3)
fig = plt.figure(figsize=(12, 10))
gs = GridSpec(
    nrows=3,
    ncols=6,
    height_ratios=[1, 1, 1],
    width_ratios=[1] * 6,
    hspace=0.3,
    wspace=0.5,
)
axd = {
    "mu": fig.add_subplot(gs[0, 0:3]),
    "beta": fig.add_subplot(gs[0, 3:]),
    "lambda_01": fig.add_subplot(gs[1, 0:2]),
    "lambda_10": fig.add_subplot(gs[1, 2:4]),
    "lambda_12": fig.add_subplot(gs[2, 0:2]),
    "lambda_21": fig.add_subplot(gs[2, 2:4]),
}
"""
fig, axd = plt.subplot_mosaic(
    [
        ["mu"] * 3 + ["beta"] * 3,
        ["lambda_01"] * 2 + ["lambda_10"] * 2 + ["."] * 2,
        ["lambda_12"] * 2 + ["lambda_21"] * 2 + ["."] * 2,
    ],
    figsize=(12, 12),
    gridspec_kw=gs_kw,
    layout="constrained",
)
"""
# flat_axs = axs.flatten()
vars = ["mu", "beta", "lambda_01", "lambda_10", "lambda_12", "lambda_21"]
vars_to_tex = {
    "mu": r"$\mu$",
    "beta": r"$\beta$",
    "lambda_01": r"$\lambda_{01}$",
    "lambda_10": r"$\lambda_{10}$",
    "lambda_12": r"$\lambda_{12}$",
    "lambda_21": r"$\lambda_{21}$",
}
for i, (k, row) in enumerate(data.iterrows()):
    fp = row["file_type"]
    row_data = row["pooled"].posterior.to_dataframe()
    label = (
        f"RevBayes"
        if fp == "rb"
        else f"TreePPL:\n {row["model_dir"]}, {row["model_name"]}"
    )
    m_key = (fp, row["model_dir"], row["model_name"])
    color = hierarchical_palette[m_key]
    style = h_style[m_key]
    for var in vars:
        ax = axd[var]
        sns.kdeplot(
            data=row_data,
            x=var,
            color=color,
            ax=ax,
            label=label,
            legend=False,
            alpha=1.0,
            **style,
        )
        # Fill
        sns.kdeplot(
            data=row_data,
            x=var,
            color=color,
            ax=ax,
            legend=False,
            alpha=0.1,
            linewidth=0,
            fill=True,
        )

for var in vars:
    ax = axd[var]
    ax.set_xlabel(vars_to_tex[var], fontsize=12)
    ax.set_ylabel("")
    if var.startswith("lambda"):
        ax.set_xlim([0.0, 1.0])
    else:
        ax.set_xlim(left=0.0)
    gen_val = (
        data_params.loc[gen_hist_idx, "".join(var.split("_"))] / 100
        if var.startswith("lambda")
        else data_params.loc[gen_hist_idx, var]
    )
    ax.axvline(
        gen_val,
        color="red",
        linestyle="--",
        linewidth=2,
    )
    xticks = ax.get_xticks()
    ax.set_xticks(sorted(set(list(xticks) + [gen_val])))
    ax.tick_params(axis="x", labelsize=8)
    ax.tick_params(axis="y", labelsize=8)
axd["lambda_21"].legend(bbox_to_anchor=(1.0, 1.00))
fig.suptitle(f"Densities for generated dataset  #{gen_hist_idx}")
# fig.tight_layout()
"""
fig.subplots_adjust(
    hspace=0.4,  # vertical spacing between rows
    wspace=4.5,  # horizontal spacing between columns
    left=0.05,
    right=0.95,
    top=0.52,
    bottom=0.08,  # margins
)
"""
fig.show()
fig.savefig(proc_output.get_temp_dir(RUN_NAME) / f"densities.{gen_hist_idx}.pdf")
``` -->