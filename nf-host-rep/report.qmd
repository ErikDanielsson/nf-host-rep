---
title: "TreePPL host repertoire"
format:
  html:
    code-fold: true
execute:
  freeze: auto
jupyter: phylogenetics
---

```{python}
# Add the python helper directory to the path

import sys
import os
import shutil
from pathlib import Path

CWD = Path(os.getcwd())
sys.path.append(str(CWD / "../python_helpers/"))

# Import the python helpers
import proc_output

import arviz as az
import xarray as xr
import matplotlib.pyplot as plt
import warnings
import pandas as pd

# Suppress warning from arviz
# -- it complains that all samples are the same
warnings.filterwarnings(action="ignore", module=r"arviz")

# Set global script options, the rest will follow from these
RUN_NAME = "test-drift-scale"
CACHE = True  # Create a cache of the files to speed up next render?
CLEAR_CACHE = False  # Clear the cache from a previous render?

# Check if we should clear the cache
if not CACHE or CLEAR_CACHE:
    proc_output.clear_temp_dir(tempdir_suffix=RUN_NAME)

# Set the names of the output directories
outdir = CWD / RUN_NAME
datadir = outdir / "data"
simdir = outdir / "sims"
bindir = outdir / "bins"
param_comb_path = bindir / "compile_id_to_configuration.csv"
```
```{python}
# Read files
df, tppl_fns = proc_output.get_files_in_dir(
    simdir,
    {
        "tppl": proc_output.get_tppl_output_pattern(),
        "rb": proc_output.get_rb_output_pattern(),
    },
)

df = proc_output.create_inference_data_df(
    df,
    {
        "tppl": lambda fn: proc_output.read_tppl_file(
            fn, with_file=CACHE, tempdir_suffix=RUN_NAME
        ),
        "rb": lambda fn: proc_output.read_rb_file(
            fn, with_file=CACHE, tempdir_suffix=RUN_NAME
        ),
    },
    0,
    1,
)
dfs = {k: v for k, v in df.groupby("file_type")}

has_rb = "rb" in dfs
if has_rb:
    df_rb = dfs["rb"]

has_tppl = "tppl" in dfs
if has_tppl:
    df_tppl = dfs["tppl"]
```
### TreePPL compile params
The following TreePPL models were run
```{python}
if has_tppl:
    compile_params = proc_output.parse_compile_params(param_comb_path)
    print(compile_params)
else:
    print("No TreePPL run found")
```
### Missing simulations
The following simulations failed to finish (too great RAM requirement)
```{python}

if has_tppl:
    missing_df = proc_output.get_missing_params(df, param_comb_path)
    if not missing_df.empty:
        print(missing_df)
    else:
        print("All runs finished!")
```

```{python}

if has_tppl:
    df_tppl_with_compile_params = proc_output.add_compile_params(
        df_tppl, compile_params
    )
    reduced_df_tppl = proc_output.create_multi_chain_dataset_df(
        df_tppl_with_compile_params, ["drift"]
    )
if has_rb:
    reduced_df_rb = proc_output.create_multi_chain_dataset_df(
        df_rb,
        ["file_type"],
    )
```
### RevBayes trace plot
This is a reference run with the model implemented in RevBayes
```{python}
# | label: fig-trace-rb-1
# | fig-cap: "2500 samples from the TPPL implementation with drift param 1"
if has_rb:
    az.plot_trace(reduced_df_rb.loc["rb", "multi_channel"], compact=False)
    plt.show()
else:
    print("No RevBayes files found")
```
### TreePPL trace plot drift=0.1
```{python}
# | label: fig-trace-tppl-1
# | fig-cap: "2500 samples from the TPPL implementation with drift param 1"
az.plot_trace(reduced_df_tppl.loc["0.1", "multi_channel"], compact=False)
plt.show()
```
### TreePPL trace plot drift=0.5
```{python}
# | label: fig-trace-tppl-2
# | fig-cap: "2500 samples from the TPPL implementation with drift param 1"
az.plot_trace(reduced_df_tppl.loc["0.5", "multi_channel"], compact=False)
plt.show()
```
### TreePPL trace plot drift=1.0
```{python}
# | label: fig-trace-tppl-3
# | fig-cap: "2500 samples from the TPPL implementation with drift param 1"
az.plot_trace(reduced_df_tppl.loc["1.0", "multi_channel"], compact=False)
plt.show()
```
### TreePPL trace plot drift=5.0
```{python}
# | label: fig-trace-tppl-4
# | fig-cap: "2500 samples from the TPPL implementation with drift param 1"
az.plot_trace(reduced_df_tppl.loc["5.0", "multi_channel"], compact=False)
plt.show()
```
### TreePPL trace plot drift=10.0
```{python}
# | label: fig-trace-tppl-5
# | fig-cap: "2500 samples from the TPPL implementation with drift param 1"
az.plot_trace(reduced_df_tppl.loc["10.0", "multi_channel"], compact=False)
plt.show()
```